
import java.sql.*;
import javax.swing.*;
import javax.swing.event.*;

public class LibraryMainFrame extends javax.swing.JFrame {

    private static final String JDBC_URL = "jdbc:mariadb://localhost:3306/konyvtar";
    private static final String USERNAME = "root";
    private static final String PASSWORD = "";

    public LibraryMainFrame() {
        initComponents();
        this.setTitle("Library");
        jButton3.setText("Visszahozva");
        jButton3.setName("returnButton");
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        jList1.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent evt) {
                if (!evt.getValueIsAdjusting()) {
                    String selectedName = jList1.getSelectedValue();
                    if (selectedName != null) {
                        try {
                            int borrowerId = getSelectedBorrowerId(selectedName);
                            loadBorrowedBooksList(borrowerId);
                        } catch (SQLException e) {
                            e.printStackTrace();
                            JOptionPane.showMessageDialog(LibraryMainFrame.this,
                                    "Hiba történt az adatbázis kapcsolódás során: " + e.getMessage(),
                                    "Adatbázis Hiba", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {

                        jList2.setModel(new DefaultListModel<>());
                    }
                }
            }
        });
        jList2.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent evt) {
                jButton3.setEnabled(!jList2.isSelectionEmpty());
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    private void loadBorrowersList() {
        DefaultListModel<String> model = new DefaultListModel<>();
        try ( Connection connection = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD);  PreparedStatement statement = connection.prepareStatement("SELECT nev FROM kolcsonzok");  ResultSet resultSet = statement.executeQuery()) {

            while (resultSet.next()) {
                String name = resultSet.getString("nev");
                model.addElement(name);
            }
            jList1.setModel(model);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Hiba történt az adatok betöltésekor: " + e.getMessage(), "Adatbázis hiba", JOptionPane.ERROR_MESSAGE);
        }
    }

    private int getSelectedBorrowerId(String name) throws SQLException {
        int id = -1;
        String sql = "SELECT id FROM kolcsonzok WHERE nev = ?";
        try ( Connection connection = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD);  PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setString(1, name);
            try ( ResultSet resultSet = statement.executeQuery()) {
                if (resultSet.next()) {
                    id = resultSet.getInt("id");
                }
            }
        }
        return id;
    }

    private void loadBorrowedBooksList(int borrowerId) {
        DefaultListModel<String> model = new DefaultListModel<>();
        String sql = "SELECT cim, iro, mufaj FROM kolcsonzesek WHERE kolcsonzokId = ?";
        try ( Connection connection = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD);  PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setInt(1, borrowerId);
            try ( ResultSet resultSet = statement.executeQuery()) {
                while (resultSet.next()) {
                    String title = resultSet.getString("cim");
                    String author = resultSet.getString("iro");
                    String genre = resultSet.getString("mufaj");
                    model.addElement(title + " - " + author + "(" + genre + ")");
                }
            }
            jList2.setModel(model);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Hiba történt a kölcsönzött könyvek betöltésekor: " + e.getMessage(), "Adatbázis hiba", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {
        String selectedBook = jList2.getSelectedValue();

        String[] parts = selectedBook.split(" - ");
        String bookTitle = parts[0];

        String sql = "DELETE FROM kolcsonzesek WHERE cim = ?";

        try ( Connection connection = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD);  PreparedStatement statement = connection.prepareStatement(sql)) {

            statement.setString(1, bookTitle);
            int affectedRows = statement.executeUpdate();

            if (affectedRows > 0) {
                ((DefaultListModel) jList2.getModel()).removeElement(selectedBook);
                JOptionPane.showMessageDialog(this, "A könyv visszahozatala sikeres!", "Sikeres művelet", JOptionPane.INFORMATION_MESSAGE);
            } else {

                JOptionPane.showMessageDialog(this, "Nem sikerült törölni a könyvet!", "Hiba", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Adatbázis hiba: " + e.getMessage(), "Hiba", JOptionPane.ERROR_MESSAGE);
        }
    }


    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        jList2.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList2);

        jButton2.setText("Bezár");
        jButton2.setToolTipText("");
        jButton2.setActionCommand("closeButton");
        jButton2.setName("closeButton"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButton(evt);
            }
        });

        jButton3.setText("Visszahozva");
        jButton3.setName("returnButton"); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButton(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3))))
                .addContainerGap(68, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(69, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButton
        System.exit(0);
    }//GEN-LAST:event_closeButton

    private void returnButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButton
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });
    }//GEN-LAST:event_returnButton

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LibraryMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LibraryMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LibraryMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LibraryMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                LibraryMainFrame mainFrame = new LibraryMainFrame();
                mainFrame.setVisible(true);
                mainFrame.loadBorrowersList();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
